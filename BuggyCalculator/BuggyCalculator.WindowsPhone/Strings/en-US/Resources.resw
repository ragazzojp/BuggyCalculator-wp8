<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutPageSubtitle.Text" xml:space="preserve">
    <value>about</value>
  </data>
  <data name="AboutPageWhatsNewHeader.Text" xml:space="preserve">
    <value>What's new</value>
  </data>
  <data name="AboutPageWhatsNewText.Text" xml:space="preserve">
    <value>This is the first release and probably the last one.</value>
  </data>
  <data name="AboutPageWhyThisAppHeader.Text" xml:space="preserve">
    <value>Why this app</value>
  </data>
  <data name="AboutPageWhyThisAppText1.Text" xml:space="preserve">
    <value>Who does not need a calculator that gives wrong results?</value>
  </data>
  <data name="AboutPageWhyThisAppText2.Text" xml:space="preserve">
    <value>Sooner or later everybody need to round or adjust the result of a calculation to their advantage, like when splitting the bill of a restaurant between true and loyal friends, or to trick one of them who still does not want to believe that 17 - 4 is actually 12.</value>
  </data>
  <data name="AboutPageWhyThisAppText3.Text" xml:space="preserve">
    <value>This app is made explicitly for these purposes.</value>
  </data>
  <data name="AboutPageWhyThisAppText4.Text" xml:space="preserve">
    <value>Just configure the behavior in the settings page and a predictable error is applied to the result of every calculation.</value>
  </data>
  <data name="AboutPageWhyThisAppText5.Text" xml:space="preserve">
    <value>Please enjoy responsibly.</value>
  </data>
  <data name="AppTitle.Text" xml:space="preserve">
    <value>WRONG CALCULATOR</value>
  </data>
  <data name="MainPageCommandAbout.Label" xml:space="preserve">
    <value>about</value>
  </data>
  <data name="MainPageCommandSettings.Label" xml:space="preserve">
    <value>settings</value>
  </data>
  <data name="ManifestDescription" xml:space="preserve">
    <value>A calculator that gives wrong results in a controlled way</value>
  </data>
  <data name="ManifestDisplayName" xml:space="preserve">
    <value>Wrong calculator</value>
  </data>
  <data name="SettingsPageCommandDefault.Label" xml:space="preserve">
    <value>default</value>
  </data>
  <data name="SettingsPageFixedErrorHeader.Text" xml:space="preserve">
    <value>Fixed error:</value>
  </data>
  <data name="SettingsPageFixedErrorText.Text" xml:space="preserve">
    <value>This value is added on top of the correct result.</value>
  </data>
  <data name="SettingsPageProportionalErrorHeader.Text" xml:space="preserve">
    <value>Proportional error:</value>
  </data>
  <data name="SettingsPageProportionalErrorText.Text" xml:space="preserve">
    <value>A value proportional to the correct result is added on top of it.</value>
  </data>
  <data name="SettingsPagePseudoRandomErrorCheckBox.Content" xml:space="preserve">
    <value>Pseudo-random error</value>
  </data>
  <data name="SettingsPagePseudoRandomErrorText.Text" xml:space="preserve">
    <value>The proportional error is set from 0% to the value above in a pseudo-random way. This means that the wrong result looks random, but it is always the same when obtained from the same correct result.</value>
  </data>
  <data name="SettingsPageSmartRoundingCheckBox.Content" xml:space="preserve">
    <value>Smart rounding</value>
  </data>
  <data name="SettingsPageSmartRoundingText.Text" xml:space="preserve">
    <value>Hide additional decimals introduced by calculator errors. This rounds the wrong result at the to same precision of the correct result, hiding the error even more.</value>
  </data>
  <data name="SettingsPageSubtitle.Text" xml:space="preserve">
    <value>settings</value>
  </data>
</root>